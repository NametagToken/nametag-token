pragma solidity ^0.4.8;
import './Ownable.sol';
import './BasicNFT.sol';


/*

NAMETAG TOKEN

An ERC721 non-fungible token with the hash of your unique Alias imprinted upon it.

Register your handle by minting a new token with that handle.
Then, others can send Ethereum Assets directly to you handle (not your address) by sending it to the account which holds that token!

________

For example, one could register the handle @bob and then alice can use wallet services to send payments to @bob.
The wallet will be ask this contract which account the @bob token resides in and will send the payment there!

*/



contract NametagToken is Ownable, BasicNFT {


    string public name = 'Nametag Token';
    string public symbol = 'NTT';


    function claimNametagToken(address beneficiary, bytes32 name, uint256 _metadata) public {
        uint256 tokenId = (uint256) (keccak256(name));
       _claimNewToken(beneficiary, tokenId, _metadata);
     }

     function _claimNewToken(address beneficiary, uint tokenId, uint256 _metadata) internal {

        require(tokenOwner[tokenId] == 0);

        _addTokenTo(beneficiary, tokenId);
        totalTokens++;
        _tokenMetadata[tokenId] = _metadata;

        Created(tokenId, beneficiary, _metadata);
      }

      //this returns the GoodTypeId since that is what the metadata is
    function goodMetadata(uint typeId, uint instanceId) constant public returns (uint256) {
        return _tokenMetadata[buildTokenId(typeId,instanceId)];
    }

    function exists(uint typeId, uint instanceId) public constant returns (bool) {
       return ownerOfToken(typeId,instanceId) != 0;
     }

     function ownerOfToken(uint typeId, uint instanceId) public constant returns (address) {
       return tokenOwner[buildTokenId(typeId,instanceId)];
     }

     function buildTokenId(uint typeId, uint instanceId) public pure returns (uint256) {
       return uint256(keccak256(typeId, '|', instanceId));
     }

}
